let chalk,ora,fetchKey,upsertKey;_9c9‍.x([["findKey",()=>findKey],["updateKey",()=>updateKey],["watchKey",()=>watchKey]]);_9c9‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_9c9‍.w("ora",[["default",["ora"],function(v){ora=v}]]);_9c9‍.w("./api",[["fetchKey",["fetchKey"],function(v){fetchKey=v}],["upsertKey",["upsertKey"],function(v){upsertKey=v}]]);







const spinner = ora('Loading data')

       const findKey = async id => {
  try {
    spinner.start()
    const result = await fetchKey(id)
    const {
      response
    } = result
    const {
      value,
      key,
    } = response
    spinner.stop()
    _9c9‍.g.console.log(chalk.green(`The value of key ${key} is ${value}`))
  } catch (error) {
    spinner.stop()
    _9c9‍.g.console.error(chalk.red(error.message))
  }
}

       const updateKey = async (id, value) => {
  try {
    spinner.start()
    const result = await upsertKey(id, value)
    const {
      response
    } = result
    const {
      message
    } = response
    spinner.stop()
    _9c9‍.g.console.log(chalk.green(message))
  } catch (error) {
    spinner.stop()
    _9c9‍.g.console.error(chalk.red(error.message))
  }
}

       const watchKey = async id => {
  try {
    spinner.start()
    setInterval(async () => {
      const result = await fetchKey(id)
      const {
        response
      } = result
      const {
        value,
        key,
      } = response
      _9c9‍.g.console.log(chalk.green(`\n The value of key ${key} is ${value} \n `))
    }, 1000)
  } catch (error) {
    _9c9‍.g.console.error(chalk.red(error.message))
  }
}

